# import the necessary packages
frompicamera.array import PiRGBArray
frompicamera import PiCamera
importRPi.GPIO as GPIO
importsmtplib
import time
import cv2
importnumpy as np
importlcd
#initialize LCD
lcd.lcd_init()
lcd.lcd_byte(lcd.LCD_LINE_1, lcd.LCD_CMD)
lcd.lcd_string(&#39;Initializing..&#39;,2)
GPIO.setup(17,GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
GPIO.setup(4,GPIO.OUT)
GPIO.output(4,GPIO.LOW)
def beep():
GPIO.output(4,GPIO.HIGH)
time.sleep(0.3)
GPIO.output(4,GPIO.LOW)
# initialize the camera and grab a reference to the raw camera capture
camera = PiCamera()
camera.resolution = (360, 280)
#initialize Face Recognizer
face_cascade = cv2.CascadeClassifier(&#39;haarcascades/frontal_face.xml&#39;)

recognizer = cv2.createLBPHFaceRecognizer()
images = np.array(np.load(&quot;./trained/trained_images.npy&quot;))
labels = np.array(np.load(&quot;./trained/trained_labels.npy&quot;))
recognizer.train(images, labels)
#Setting Up Mail
smtpUser = &#39;pi.raspberry.root@gmail.com&#39;
smtpPass = &#39;raspberryx&#39;
toAddr = &#39;ankur.sarode@gmail.com&#39;
fromAdd = smtpUser
subject = &#39;ALERT! Security Breached&#39;
header = &#39;To: &#39;+toAddr+&#39;\nFrom: &#39;+fromAdd+&#39;\nSubject: &#39;+subject
body = &#39;Security has been breached. Please be cautious&#39;
s = smtplib.SMTP(&#39;smtp.gmail.com&#39;,587)
print &quot;initializing Camera&quot;
# allow the camera to warmup
time.sleep(0.1)
while(1):
rawCapture = PiRGBArray(camera,size=(360, 280))
lcd.lcd_string(&#39;Recognizing..&#39;,2)
print &quot;Recognizing..&quot;
count = 0
# capture frames from the camera
for frame in camera.capture_continuous(rawCapture, format=&quot;bgr&quot;, use_video_port=True):
image = frame.array
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
# show the frame
cv2.imshow(&quot;Frame&quot;, image)
key = cv2.waitKey(1) &amp; 0xFF
# detecting face
if(len(face_cascade.detectMultiScale(gray, 1.3,5))&gt;0):
count+=1
print &quot;Detected&quot;
if(count&gt;2):
break
# clear the stream in preparation for the next frame
rawCapture.truncate(0)
# break on pressing &#39;q&#39;
if key == ord(&quot;q&quot;):
break
if(GPIO.input(17)!=0):
print(&#39;Security Breached!&#39;)
lcd.lcd_string(&#39;SecurityBreached&#39;,2)
s.ehlo()
s.starttls()
s.ehlo()
s.login(smtpUser, smtpPass)
s.sendmail(fromAdd, toAddr, header+&#39;\n\n&#39;+body)
s.quit()

print &#39;Email Sent&#39;
lcd.lcd_string(&#39;Email Sent&#39;,2)
print header+&#39;\n&#39;+body
time.sleep(3)
lcd.GPIO.cleanup()
exit(0)
break
lcd.lcd_string(&#39;Predection..&#39;,2)
predict_img = gray
faces = face_cascade.detectMultiScale(predict_img, 1.3, 5)
for (x,y,w,h) in faces:
nbr_predicted, conf = recognizer.predict(predict_img[y:y+h,x:x+w])
print &quot;Prediction: &quot;,nbr_predicted
print &quot;Confidence: &quot;,conf
if(conf&lt;=70):
beep()
print &quot;Security Disabled&quot;
lcd.lcd_string(&#39;SecurityDisabled&#39;,2)
time.sleep(20)
